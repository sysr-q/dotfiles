#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
# vim: ts=4 shiftwidth=4 expandtab
# Part of the "sysrq dotfiles experience". Available at:
#    sysrq <chris@gibsonsec.org> https://github.com/sysr-q/dotfiles
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>
from __future__ import print_function

from enum import Enum
import argparse
import os
import sys

try:
    import sh as real_sh
except ImportError:
    print("Install `sh` (pip install sh) for my sanity and yours.")
    sys.exit(1)


class Prefixes(Enum):
    ERROR = " \033[0;31m✖\033[0m"
    WARN = " \033[38;5;166m⚠\033[0m"
    SUCCESS = " \033[0;32m✔\033[0m"
    INFO = " \033[0;34m➜\033[0m"
    DEBUG = " \033[0;34m?\033[0m"
    HEADER = "\033[1m{}\033[0m"
    BOLD = "\033[1m{}\033[0m"


class PlainPrefixes(Enum):
    ERROR = "[!]"
    WARN = "[@]"
    SUCCESS = "[+]"
    INFO = "[ ]"
    DEBUG = "[?]"
    HEADER = "-> {}"
    BOLD = "{}"


def error(*args, **kwargs):
    print(Prefixes.ERROR.value, *args, **kwargs)


def error_r(*args):
    print(*args, f"\r{Prefixes.ERROR.value}")


def warn(*args, **kwargs):
    print(Prefixes.WARN.value, *args, **kwargs)


def success(*args, **kwargs):
    print(Prefixes.SUCCESS.value, *args, **kwargs)


def success_r(*args):
    print(*args, f"\r{Prefixes.SUCCESS.value}")


def info(*args, **kwargs):
    kwargs.setdefault("nr", False)
    kwargs.setdefault("end", "" if kwargs.pop("nr") else None)
    print(Prefixes.INFO.value, *args, **kwargs)
    sys.stdout.flush()


def debug(*args, **kwargs):
    print(Prefixes.DEBUG.value, *args, **kwargs)


def header(*args, **kwargs):
    kwargs.setdefault("nr", False)
    kwargs.setdefault("end", "" if kwargs.pop("nr") else None)
    print(Prefixes.HEADER.value.format(" ".join(args)), **kwargs)
    sys.stdout.flush()


def bold(s):
    return Prefixes.BOLD.value.format(s)


# # # # # # # # # #


def sh(args, *pargs, _always=False, **kwargs):
    # Variably either actually call a command or only print it, depending on
    # the safety of the command (_always) and mode of dotfiles update.
    pargs = list(map(str, pargs))
    if args.no_sh:
        print(" ".join(pargs))
    if args.no_sh and not _always:
        return ""
    command = real_sh.Command(pargs.pop(0))
    return command(*pargs, **kwargs)


def exists(path):
    try:
        os.stat(path)
    except OSError:
        return False
    return True


def exists_in(base, path):
    """Does this file exist as a symlink to our dotfiles?"""
    try:
        l = os.readlink(path)
        return l.startswith(base)
    except OSError:
        return False  # "doesn't exist"
    return False  # "fallback"


def find(args, path, t=None, mindepth=1, maxdepth=1):
    if t is not None:
        x = ("-type", t)
    else:
        x = ()

    files = sh(
        args,
        "find",
        path,
        "-mindepth",
        mindepth,
        "-maxdepth",
        maxdepth,
        "-not",
        "-iwholename",
        "*.git*",
        *x,
        _always=True,
    ).split("\n")

    for f in files:
        yield os.path.basename(f.rstrip())


# # # # # # # # # #


def action(f):
    # Globals are unnecessary when functions exist.
    if not hasattr(action, "list"):
        action.list = set()
    action.list.add(f)
    return f


@action
def test_print(args):
    header("This is a test of header()")
    error("This is a test of error()")
    warn("This is a test of warn()")
    success("This is a test of success()")
    info("This is a test of info()")
    debug("This is a test of debug()")


@action
def checkout(args):
    if exists(args.dotfiles):
        info(f"dotfiles folder `{bold(args.dotfiles)}` already exists")
        return
    info(f"Cloning dotfiles repository to `{bold(args.dotfiles)}`... ", nr=True)
    try:
        sh(
            args,
            "git",
            "clone",
            "--recursive",
            "--branch",
            args.branch,
            args.git_url,
            args.dotfiles,
            _always=True,
        )
        success_r()
    except real_sh.ErrorReturnCode as e:
        error_r()
        header("Exit code: ", nr=True)
        print(e.exit_code)
        if e.stdout:
            header("STDOUT:")
            print(e.stdout.decode())
        if e.stderr:
            header("STDERR:")
            print(e.stderr.decode())
        sys.exit(1)


@action
def update(args):
    try:
        rev = sh(args, "git", "rev-parse", "HEAD", _cwd=args.dotfiles, _always=True)
    except real_sh.ErrorReturnCode as e:
        rev = None
    if rev:
        info(f"Updating `{bold(args.dotfiles)}`... ", nr=True)

        old_commit = sh(
            args,
            "git",
            "rev-parse",
            "--short",
            "HEAD",
            _cwd=args.dotfiles,
            _always=True,
        ).rstrip()

        sh(args, "git", "pull", _cwd=args.dotfiles)
        sh(
            args,
            "git",
            "submodule",
            "update",
            "--init",
            "--recursive",
            "--quiet",
            _cwd=args.dotfiles,
        )

        new_commit = sh(
            args,
            "git",
            "rev-parse",
            "--short",
            "HEAD",
            _cwd=args.dotfiles,
            _always=True,
        ).rstrip()

        if old_commit != new_commit:
            new_commit = f"{old_commit}..{new_commit}"

        success_r(f"({new_commit})")
    else:
        error(args.dotfiles, "is not a git repository, can't update.")
        sys.exit(1)


def create_link_plan(args):
    tasks = []

    def dot_prefix(fn):
        if fn.startswith("."):
            return fn
        return f".{fn}"

    # Symlink direct top level files separately (.vimrc, .tmux.conf, ...)
    for f in find(args, args.dotfiles, "f"):
        what = os.path.join(args.dotfiles, f)
        where = os.path.join(args.base, dot_prefix(f))
        if exists_in(args.dotfiles, where):
            # this_is_fine.jpg
            continue
        if exists(where):
            # It exists but it doesn't have a symlink from the dotfiles folder
            tasks.append(
                {
                    "action": "warn",
                    "args": [f"`{bold(where)}`", "exists already"],
                    "platform": None,
                }
            )
            continue
        tasks.append(
            {
                "action": "symlink",
                "args": [what, where],
                "platform": "",
            }
        )

    for d in find(args, args.dotfiles, "d"):
        create_dir = os.path.join(args.base, dot_prefix(d))
        if not exists(create_dir):
            tasks.append({"action": "mkdir", "args": [create_dir], "platform": ""})
        # EX: .$d/$df (.config/fish, .bin/dotfiles, ...)
        for df in find(args, os.path.join(args.dotfiles, d)):
            what = os.path.join(args.dotfiles, d, df)
            where = os.path.join(args.base, dot_prefix(d), df)
            if exists_in(args.dotfiles, where):
                # Skip otherwise we get weird symlinks in symlinks for folders.
                continue
            if exists(where):
                # this_is_fine.jpg
                tasks.append(
                    {
                        "action": "warn",
                        "args": [f"`{bold(where)}`", "exists already"],
                        "platform": None,
                    }
                )
                continue
            tasks.append({"action": "symlink", "args": [what, where], "platform": ""})

    plan = {
        "tasks": tasks,
        "changes": len(list(filter(lambda t: t["action"] in ("mkdir", "symlink"), tasks))),
    }

    return plan


def run_plan_with_funcs(args, funcs):
    plan = create_link_plan(args)
    for task in plan["tasks"]:
        if task["action"] not in funcs:
            debug(f"Unknown action {task['action']} called with args: {task['args']}")
        funcs[task["action"]](task)
    return plan["changes"]


@action
def show_plan(args):
    changes = run_plan_with_funcs(
        args,
        {
            "mkdir": lambda t: info(f"mkdir -p {' '.join(t['args'])}"),
            "symlink": lambda t: info(f"ln -fs {' '.join(t['args'])}"),
            "warn": lambda t: warn(f"{' '.join(t['args'])}"),
        },
    )

    if changes > 0:
        info(
            f"If you're happy with {changes} planned change{'' if changes == 1 else 's'}, re-run as `{bold('dotfiles -a apply')}`"
        )
    else:
        info("No changes required.")


@action
def apply(args):
    def mkdir(task):
        try:
            sh(args, "mkdir", "-p", *task["args"])
        except real_sh.ErrorReturnCode as e:
            error(f"sh error: `{bold('mkdir -p ' + ' '.join(task['args']))}")

    def symlink(task):
        try:
            sh(args, "ln", "-fs", *task["args"])
        except real_sh.ErrorReturnCode as e:
            error(f"sh error: `{bold('ln -fs ' + ' '.join(task['args']))}")

    changes = run_plan_with_funcs(
        args,
        {
            "mkdir": mkdir,
            "symlink": symlink,
            "warn": lambda t: warn(f"{' '.join(t['args'])}"),
        },
    )

    if changes > 0:
        info(f"{changes} change{'' if changes == 1 else 's'} made.")
    else:
        info("No changes made.")


def main():
    actions_dict = {f.__name__.replace("_", "-"): f for f in action.list}
    home = os.path.expanduser("~")

    p = argparse.ArgumentParser()
    p.add_argument("--no-color", action="store_true", default=False)
    p.add_argument("-b", "--base", type=str, default=home)
    p.add_argument("--no-sh", action="store_true", default=False)
    p.add_argument(
        "-d",
        "--dotfiles",
        type=str,
        default=os.path.join(home, ".dotfiles"),
    )
    p.add_argument(
        "-g",
        "--git-url",
        type=str,
        default="https://github.com/sysr-q/dotfiles.git",
    )
    p.add_argument("--branch", type=str, default="master")
    p.add_argument(
        "-a",
        "--actions",
        nargs="+",
        choices=actions_dict,
        default=["update", "show-plan"],
    )

    args = p.parse_args()

    if args.no_color:
        # /shrug
        global Prefixes
        Prefixes = PlainPrefixes

    for act in args.actions:
        actions_dict[act](args)


if __name__ == "__main__":
    main()
